@using BlazorApp.DataTransferContract.DataTransferObjects.Order;
@using BlazorApp.DataTransferContract.DataTransferObjects.State;
@implements IDisposable;
@inject NavigationManager NavigationManager;
@inject HttpClient Http;

<EditForm EditContext="editContext" OnValidSubmit="Submit">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="d-flex flex-row">
        <label class="flex-grow-1 d-flex">
            Name:
            <InputText class="flex-grow-1" @bind-Value="Model!.Name" />
        </label>
        <label>
            State:
            <InputSelect @bind-Value="Model!.StateId">
                @foreach (var state in States)
                {
                    <option value="@state.Id">@state.Abbreviation</option>
                }            
            </InputSelect>            
        </label>
    </div>
    <div>
        <button type="submit">Create</button>
    </div>
</EditForm>


@code {
    private EditContext editContext;
    private ValidationMessageStore messageStore;

    [Parameter]
    public IEnumerable<StateDto> States { get; set; }
    [Parameter]
    public string NavigateUriOnSuccess { get; set; }

    [SupplyParameterFromForm]
    public OrderUpsertDto Model { get; set; }


    protected override void OnInitialized()
    {
        Model ??= new();
        editContext = new(Model);
        editContext.OnValidationRequested += HandleValidationRequested;
        messageStore = new(editContext);
    }

    private void HandleValidationRequested(object? sender,
        ValidationRequestedEventArgs args)
    {
        messageStore?.Clear();

        // // Custom validation logic
        // if (!Model!.Options)
        // {
        //     messageStore?.Add(() => Model.Options, "Select at least one.");
        // }
    }

    private async Task Submit()
    {
        await Http.PostAsJsonAsync("api/orders", Model);
        NavigationManager.NavigateTo(NavigateUriOnSuccess);
    }

    public void Dispose()
    {
        if (editContext is not null)
        {
            editContext.OnValidationRequested -= HandleValidationRequested;
        }
    }
}

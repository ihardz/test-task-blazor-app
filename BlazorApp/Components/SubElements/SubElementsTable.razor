@using BlazorApp.Components.Modals
@using BlazorApp.DataTransferContract.DataTransferObjects.Order
@inject HttpClient Http;
@inject NavigationManager NavigationManager;

<table class="table table-striped">
    <thead>
        <tr>
            <th>Element</th>
            <th>Type</th>
            <th>Width</th>
            <th>Height</th>
            <th>Actions</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Items)
        {
            <tr>
                <td>@item.Element</td>
                <td>@ResolveType(item.TypeId)</td>
                <td>@item.Width</td>
                <td>@item.Height</td>
                <td class="d-flex gap-3">
                    <DeleteConfirmModal TargetName="SubElement" OnConfirm="@(async () => await HandleDelete(@item.Id))" />
                    <SubElementUpsertForm Types="@Types" EditValue="@item" />
                </td>
            </tr>
        }
    </tbody>
</table>

@code {
    [Parameter]
    public IEnumerable<SubElementDto> Items { get; set; }
    [Parameter]
    public IEnumerable<SubElementTypeDto> Types { get; set; }

    private string ResolveType(int typeId) => Types?.FirstOrDefault(x => x.Id.Equals(typeId))?.Name ?? "Unresolved";
    private async Task HandleDelete(int id)
    {
        await Http.DeleteAsync($"api/subElements/{id}");
        NavigationManager.Refresh();
    }
}

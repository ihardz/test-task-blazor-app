@using AutoMapper
@using BlazorApp.Components.Modals
@using BlazorApp.DataTransferContract.DataTransferObjects.Order;
@using BlazorApp.DataTransferContract.DataTransferObjects.State;
@implements IDisposable;
@inject NavigationManager NavigationManager;
@inject HttpClient Http;
@inject IMapper Mapper;

<EditForm EditContext="editContext" OnValidSubmit="Submit">
    <ModalSubmit TriggerButtonLabel="@TriggerButtonLabel" SubmitButtonLabel="@SubmitButtonLabel">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <div class="d-flex flex-row gap-3">
            <label class="flex-grow-1">
                Name:
                <InputText @bind-Value="Model!.Name" class="form-control" />
            </label>
            <label>
                Quantity:
                <InputNumber @bind-Value="Model!.Quantity" class="form-control" />
            </label>
        </div>
    </ModalSubmit>
</EditForm>


@code {
    private const string Endpoint = "api/windows";
    private delegate Task<HttpResponseMessage> SendData(WindowUpsertDto data);
    private EditContext editContext;
    private ValidationMessageStore messageStore;
    private int? Id => EditValue?.Id;
    private bool IsEdit => Id.HasValue;
    private string TriggerButtonLabel => IsEdit ? "Edit Window" : "Create Window";
    private string SubmitButtonLabel => IsEdit ? "Update" : "Create";

    private SendData ServerSend => IsEdit ?
        (data) => Http.PutAsJsonAsync($"{Endpoint}/{Id}", data) :
        (data) => Http.PostAsJsonAsync(Endpoint, data);

    [Parameter]
    public string NavigateUriOnSuccess { get; set; }

    [Parameter]
    public WindowDto EditValue { get; set; }

    [Parameter]
    public int? OrderId { get; set; }

    [SupplyParameterFromForm]
    public WindowUpsertDto Model { get; set; }

    protected override void OnInitialized()
    {
        Model = IsEdit ? Mapper.Map<WindowUpsertDto>(EditValue) : new();
        editContext = new(Model);
        editContext.OnValidationRequested += HandleValidationRequested;
        messageStore = new(editContext);
    }

    private void HandleValidationRequested(object sender, ValidationRequestedEventArgs args)
    {
        messageStore?.Clear();

        // Custom validation logic
        if (Model!.Quantity == default)
        {
            messageStore?.Add(() => Model.Quantity, "Quantity cannot be 0");
        }
    }

    private async Task Submit()
    {
        this.Model.OrderId = OrderId ?? EditValue.OrderId;
        try
        {
            var response = await ServerSend(this.Model);
            response.EnsureSuccessStatusCode();
            if (NavigateUriOnSuccess is null)
            {
                NavigationManager.Refresh();
            }
            else
            {
                NavigationManager.NavigateTo(NavigateUriOnSuccess);
            }
        }
        catch (Exception)
        {
            // todo: show error
            throw;
        }

    }

    public void Dispose()
    {
        if (editContext is not null)
        {
            editContext.OnValidationRequested -= HandleValidationRequested;
        }
    }
}
